FileAST: 
  FuncDef: 
    Decl: shiftleftbyone, [], [], []
      FuncDecl: 
        ParamList: 
          Decl: array, [], [], []
            ArrayDecl: 
              TypeDecl: array, []
                IdentifierType: ['char']
          Decl: n, [], [], []
            TypeDecl: n, []
              IdentifierType: ['int']
        TypeDecl: shiftleftbyone, []
          IdentifierType: ['void']
    Compound: 
      Decl: i, [], [], []
        TypeDecl: i, []
          IdentifierType: ['int']
      Decl: array2, [], [], []
        ArrayDecl: 
          TypeDecl: array2, []
            IdentifierType: ['char']
          Constant: int, 10
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <
          ID: i
          BinaryOp: -
            ID: n
            Constant: int, 1
        UnaryOp: p++
          ID: i
        Assignment: =
          ArrayRef: 
            ID: array2
            ID: i
          ArrayRef: 
            ID: array
            BinaryOp: +
              ID: i
              Constant: int, 2
      Assignment: =
        ArrayRef: 
          ID: array2
          BinaryOp: -
            ID: n
            Constant: int, 1
        ArrayRef: 
          ID: array
          Constant: int, 1
      Assignment: =
        ArrayRef: 
          ID: array2
          ID: n
        ArrayRef: 
          ID: array2
          Constant: int, 0
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <
          ID: i
          BinaryOp: +
            ID: n
            Constant: int, 1
        UnaryOp: p++
          ID: i
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, "%c"
            ArrayRef: 
              ID: array2
              ID: i
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "\n"
  FuncDef: 
    Decl: shiftrightbyone, [], [], []
      FuncDecl: 
        ParamList: 
          Decl: array, [], [], []
            ArrayDecl: 
              TypeDecl: array, []
                IdentifierType: ['char']
          Decl: n, [], [], []
            TypeDecl: n, []
              IdentifierType: ['int']
        TypeDecl: shiftrightbyone, []
          IdentifierType: ['void']
    Compound: 
      Decl: i, [], [], []
        TypeDecl: i, []
          IdentifierType: ['int']
      Decl: array2, [], [], []
        ArrayDecl: 
          TypeDecl: array2, []
            IdentifierType: ['char']
          Constant: int, 10
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <
          ID: i
          ID: n
        UnaryOp: p++
          ID: i
        Assignment: =
          ArrayRef: 
            ID: array2
            ID: i
          ArrayRef: 
            ID: array
            BinaryOp: -
              ID: i
              Constant: int, 1
      Assignment: =
        ArrayRef: 
          ID: array2
          ID: n
        ArrayRef: 
          ID: array2
          Constant: int, 0
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <
          ID: i
          BinaryOp: +
            ID: n
            Constant: int, 1
        UnaryOp: p++
          ID: i
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, "%c"
            ArrayRef: 
              ID: array2
              ID: i
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "\n"
  FuncDef: 
    Decl: writePatternNumber, [], [], []
      FuncDecl: 
        ParamList: 
          Decl: n, [], [], []
            TypeDecl: n, []
              IdentifierType: ['int']
        TypeDecl: writePatternNumber, []
          IdentifierType: ['void']
    Compound: 
      Decl: i, [], [], []
        TypeDecl: i, []
          IdentifierType: ['int']
      Decl: temp, [], [], []
        TypeDecl: temp, []
          IdentifierType: ['int']
      Decl: a, [], [], []
        ArrayDecl: 
          TypeDecl: a, []
            IdentifierType: ['char']
          Constant: int, 10
      Decl: b, [], [], []
        ArrayDecl: 
          TypeDecl: b, []
            IdentifierType: ['char']
          Constant: int, 10
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <
          ID: i
          ID: n
        UnaryOp: p++
          ID: i
        Compound: 
          Assignment: =
            ArrayRef: 
              ID: a
              ID: i
            BinaryOp: +
              Constant: int, 49
              ID: i
      Assignment: =
        ArrayRef: 
          ID: a
          ID: n
        ArrayRef: 
          ID: a
          Constant: int, 0
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <
          ID: i
          BinaryOp: +
            ID: n
            Constant: int, 1
        UnaryOp: p++
          ID: i
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, "%c"
            ArrayRef: 
              ID: a
              ID: i
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "\n"
      For: 
        Assignment: =
          ID: i
          ID: n
        BinaryOp: >=
          ID: i
          Constant: int, 0
        UnaryOp: p--
          ID: i
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, "%c"
            ArrayRef: 
              ID: a
              ID: i
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "\n"
      FuncCall: 
        ID: shiftleftbyone
        ExprList: 
          ID: a
          ID: n
      FuncCall: 
        ID: shiftrightbyone
        ExprList: 
          ID: a
          ID: n
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <
          ID: i
          ID: n
        UnaryOp: p++
          ID: i
        Compound: 
          If: 
            BinaryOp: <
              ID: i
              BinaryOp: -
                ID: n
                Constant: int, 2
            Assignment: =
              ArrayRef: 
                ID: b
                ID: i
              ArrayRef: 
                ID: a
                BinaryOp: +
                  ID: i
                  Constant: int, 2
      For: 
        Assignment: =
          ID: i
          Constant: int, 0
        BinaryOp: <
          ID: i
          BinaryOp: +
            ID: n
            Constant: int, 1
        UnaryOp: p++
          ID: i
        FuncCall: 
          ID: printf
          ExprList: 
            Constant: string, "%c"
            ArrayRef: 
              ID: b
              ID: i
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "\n"
  FuncDef: 
    Decl: main, [], [], []
      FuncDecl: 
        TypeDecl: main, []
          IdentifierType: ['int']
    Compound: 
      Decl: n, [], [], []
        TypeDecl: n, []
          IdentifierType: ['int']
      FuncCall: 
        ID: printf
        ExprList: 
          Constant: string, "Enter the value of N: "
      FuncCall: 
        ID: writePatternNumber
        ExprList: 
          ID: n
      Return: 
        Constant: int, 0
